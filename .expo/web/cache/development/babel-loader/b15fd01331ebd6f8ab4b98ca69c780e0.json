{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\USUARIO\\\\Desktop\\\\React Native course\\\\FirstApp\\\\first-app\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TaskItem from \"./components/TaskItem\";\nimport TaskInput from \"./components/TaskInput\";\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(Array()),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskList = _useState2[0],\n      setTaskList = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalState = _useState4[0],\n      setModalState = _useState4[1];\n\n  var addTaskHandler = function addTaskHandler(taskTitle) {\n    var newKey;\n\n    try {\n      newKey = Number(taskList[taskList.length - 1].key) + 1;\n    } catch (e) {\n      newKey = 1;\n    }\n\n    setTaskList(function (taskList) {\n      return [].concat(_toConsumableArray(taskList), [{\n        key: \"\" + newKey,\n        value: taskTitle\n      }]);\n    });\n  };\n\n  var deleteTaskHandler = function deleteTaskHandler(taskToRemoveKey) {\n    setTaskList(function (taskList) {\n      return taskList.filter(function (tasks) {\n        return tasks.key !== taskToRemoveKey;\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Add new task\",\n    onPress: function onPress() {\n      return setModalState(!modalState);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), React.createElement(TaskInput, {\n    onAddTask: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), React.createElement(FlatList, {\n    data: taskList,\n    renderItem: function renderItem(task) {\n      return React.createElement(TaskItem, {\n        taskId: task.item.key,\n        taskTitle: task.item.value,\n        onDeleteTask: deleteTaskHandler,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 27\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 40\n  },\n  inputArea: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  textInput: {\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1,\n    padding: 10,\n    width: \"80%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/USUARIO/Desktop/React Native course/FirstApp/first-app/App.tsx"],"names":["React","useState","TaskItem","TaskInput","App","Array","taskList","setTaskList","modalState","setModalState","addTaskHandler","taskTitle","newKey","Number","length","key","e","value","deleteTaskHandler","taskToRemoveKey","filter","tasks","styles","container","task","item","StyleSheet","create","padding","inputArea","flexDirection","justifyContent","alignItems","textInput","borderBottomColor","borderBottomWidth","width"],"mappings":";;;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;AAEA,OAAOC,QAAP;AACA,OAAOC,SAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC1B,kBAAgCH,QAAQ,CAACI,KAAK,EAAN,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAoCN,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOO,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAuB;AAC1C,QAAIC,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAGC,MAAM,CAACP,QAAQ,CAACA,QAAQ,CAACQ,MAAT,GAAkB,CAAnB,CAAR,CAA8BC,GAA/B,CAAN,GAA4C,CAArD;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACRJ,MAAAA,MAAM,GAAG,CAAT;AACH;;AACDL,IAAAA,WAAW,CAAC,UAAAD,QAAQ;AAAA,0CAAQA,QAAR,IAAkB;AAACS,QAAAA,GAAG,OAAKH,MAAT;AAAmBK,QAAAA,KAAK,EAAEN;AAA1B,OAAlB;AAAA,KAAT,CAAX;AACH,GARD;;AAUA,MAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,eAAD,EAA6B;AACnDZ,IAAAA,WAAW,CAAC,UAAAD,QAAQ,EAAI;AACpB,aAAOA,QAAQ,CAACc,MAAT,CAAgB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACN,GAAN,KAAcI,eAAlB;AAAA,OAArB,CAAP;AACH,KAFU,CAAX;AAGH,GAJD;;AAMA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA6B,IAAA,OAAO,EAAE;AAAA,aAAMd,aAAa,CAAC,CAACD,UAAF,CAAnB;AAAA,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEE,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEJ,QAAhB;AACU,IAAA,UAAU,EAAE,oBAAAkB,IAAI;AAAA,aACZ,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAEA,IAAI,CAACC,IAAL,CAAUV,GAA5B;AACU,QAAA,SAAS,EAAES,IAAI,CAACC,IAAL,CAAUR,KAD/B;AAEU,QAAA,YAAY,EAAEC,iBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY;AAAA,KAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAaH;AAED,IAAMI,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,OAAO,EAAE;AADF,GADkB;AAI7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,cAAc,EAAE,eAFT;AAGPC,IAAAA,UAAU,EAAE;AAHL,GAJkB;AAS7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,iBAAiB,EAAE,OADZ;AAEPC,IAAAA,iBAAiB,EAAE,CAFZ;AAGPP,IAAAA,OAAO,EAAE,EAHF;AAIPQ,IAAAA,KAAK,EAAE;AAJA;AATkB,CAAlB,CAAf","sourcesContent":["import {StatusBar} from 'expo-status-bar';\nimport React, {useState} from 'react';\nimport {Button, FlatList, ScrollView, StyleSheet, Text, TextInput, View} from 'react-native';\nimport TaskItem from \"./components/TaskItem\";\nimport TaskInput from \"./components/TaskInput\";\n\nexport default function App() {\n    const [taskList, setTaskList] = useState(Array<{ key: string, value: string }>())\n    const [modalState, setModalState] = useState(false);\n\n    const addTaskHandler = (taskTitle: string) => {\n        let newKey: number\n        try {\n            newKey = Number(taskList[taskList.length - 1].key) + 1\n        } catch (e) {\n            newKey = 1\n        }\n        setTaskList(taskList => [...taskList, {key: `${newKey}`, value: taskTitle}])\n    }\n\n    const deleteTaskHandler = (taskToRemoveKey: string) => {\n        setTaskList(taskList => {\n            return taskList.filter(tasks => tasks.key !== taskToRemoveKey)\n        })\n    }\n\n    return (\n        <View style={styles.container}>\n            <Button title=\"Add new task\" onPress={() => setModalState(!modalState)}/>\n            <TaskInput onAddTask={addTaskHandler}/>\n            <FlatList data={taskList}\n                      renderItem={task =>\n                          <TaskItem taskId={task.item.key}\n                                    taskTitle={task.item.value}\n                                    onDeleteTask={deleteTaskHandler}\n                          />\n                      }/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 40\n    },\n    inputArea: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n    textInput: {\n        borderBottomColor: \"black\",\n        borderBottomWidth: 1,\n        padding: 10,\n        width: \"80%\"\n    },\n});\n"]},"metadata":{},"sourceType":"module"}